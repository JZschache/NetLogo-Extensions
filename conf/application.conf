
netlogo {
  # must be at least 1
  # old: concurrent-headless-environments = 4
  # new: is set by akka.deployment./NetLogoActorsRouter
  
  # name of reporter used to calculate the rewards for choices
  reward-reporter-name = "get-reward"
  # name of reporter that can be used to define a dynamic group structure
  group-reporter-name = "get-groups"
  # number of groups that work in parallel
  group-number = 100
  # number of NLGroups that are handled by one group 
  # (with a fixed group structure, this number determines the group-number)
  group-batch-size = 10
  # number of milliseconds between choices of a group or between
  # the calls of group-reporter
  group-pause-ms = 100
}


akka {
  #loglevel = DEBUG
 # loglevel = INFO
  daemonic = off
  actor {
    debug {
      lifecycle = on
      event-stream = on
      fsm = on
    }
    
    deployment {
      /NetLogoSupervisor/NetLogoActorsRouter {
        # available: "from-code", "round-robin", "random", "smallest-mailbox", "scatter-gather", "broadcast"
        router = "smallest-mailbox"
        nr-of-instances = 2
        # using the resizer may lead to unhandled group choices because routees are crated on demand and
        # may not be ready (with compiled reward-reporter) to handle group choices
        #resizer {
          # The fewest number of routees the router should ever have.
          #lower-bound = 1
          # The most number of routees the router should ever have.
          # Carefull: each routee is allocated to netlogo-dispatcher and, hence, has its own thread
          # the number should never be higher than threads available 
          #upper-bound = 4
        #}
      }
    }
    
    default-dispatcher.throughput = 1
  }
}

netlogo-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = PinnedDispatcher
  # What kind of ExecutionService to use
  # PinnedDispatcher must be used together with executor=thread-pool-executor.
  executor = "thread-pool-executor"
  
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 1
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 3.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 64
  }
  
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

