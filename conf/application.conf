
netlogo {
  # must be at least 1
  # there may be a maximum (depends on number of threads available - see default-dispatcher)
  # it makes little sense to use many headless NetLogos if they cannot work concurrently
  concurrent-headless-environments = 5
  
  # NetLogo needs to block until data (GroupChoice) has arrived
  # this timeout may be set to higher values
  timeout_ms = 5000
  
  # name of reporter used to calculate the rewards for choices
  reward-reporter-name = "get-reward"
  # name of reporter that can be used to define a dynamic group structure
  group-reporter-name = "get-groups"
  # number of groups that work in parallel
  group-number = 100
  # number of NLGroups that are handled by one group 
  # (with a fixed group structure, this number determines the group-number)
  group-batch-size = 10000
  # number of milliseconds between choices of a group or between
  # the calls of group-reporter (this is not the real time but can be used to slow down the simulation)
  group-pause-ms = 1
}


akka {
  #loglevel = DEBUG
 # loglevel = INFO
  daemonic = off
  actor {
    debug {
      lifecycle = on
      event-stream = on
      fsm = on
    }
    
    #deployment {
    #  /NetLogoSupervisor/NetLogoActorsRouter {
    #    # available: "from-code", "round-robin", "random", "smallest-mailbox", "scatter-gather", "broadcast"
    #    router = "smallest-mailbox"
    #    nr-of-instances = 4
    #    # using the resizer may lead to unhandled group choices because routees are crated on demand and
    #    # may not be ready (with compiled reward-reporter) to handle group choices
    #    #resizer {
    #      # The fewest number of routees the router should ever have.
    #      #lower-bound = 1
    #      # The most number of routees the router should ever have.
    #      # Carefull: each routee is allocated to netlogo-dispatcher and, hence, has its own thread
    #      # the number should never be higher than threads available 
    #      #upper-bound = 4
    #    #}
    #  }
    #}
    
    default-dispatcher {
    
      executor = "fork-join-executor"

      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 16
      }
      
      throughput = 5
    }
    
  }
}

#netlogo-dispatcher {
#  type = PinnedDispatcher
#  executor = "thread-pool-executor" 
#}

